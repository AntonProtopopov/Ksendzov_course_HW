example on the JSON case

4. Создать внешний репозиторий c названием JSON.
5. Клонировать репозиторий JSON на локальный компьютер.

git clone JSON

6. Внутри локального JSON создать файл “new.json”.

touch new.json

7. Добавить файл под гит.

git add new.json

8. Закоммитить файл.

git commit -m"add new.json"

9. Отправить файл на внешний GitHub репозиторий.

git push

10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.

{
	"name": "Protopopov_Anton_Olegovich",
	"age": 21,
	"pets": 1,
	"future_salary": "$1200"
}

11. Отправить изменения на внешний репозиторий.

git add .
git commit -m"edit new.json"
git push

12. Создать файл preferences.json

touch preferences.json

13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.

vim preferences.json

{
	"fav_film": "Goodfellas_1990",
	"fav_series": null,
	"fav_food": "veal_orloff",
	"fav_season": "summer",
	"country_to_visit": "turkey"
}

14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON

cat > skills.json

{
	"english": false,
	"GIT": true,
	"Terminal": true,
	"manual_testing": true,
	"mobile_testing": true
}

15. Отправить сразу 2 файла на внешний репозиторий.

git add .
git commit -m"add preferences and skills"
git push

16. На веб интерфейсе создать файл bug_report.json.
17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
20. Синхронизировать внешний и локальный репозиторий JSON
